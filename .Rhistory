# Print correlated features
cat("Highly Correlated Features:\n")
for (i in seq_along(correlated_features)) {
if (length(correlated_features[[i]]) > 0) {
cat(sprintf("Feature %-3d and Features %s\n", i, paste(correlated_features[[i]], collapse=", ")))
}
}
# Print correlated features
cat("Highly Correlated Features:\n")
for (i in seq_along(correlated_features)) {
if (length(correlated_features[[i]]) > 0) {
cat(sprintf("Feature %3d and Features %s\n", i, paste(correlated_features[[i]], collapse=", ")))
}
}
# Print correlated features
cat("Highly Correlated Features:\n")
for (i in seq_along(correlated_features)) {
if (length(correlated_features[[i]]) > 0) {
cat(sprintf("Feature %3d and Features %s\n", i, paste(correlated_features[[i]], collapse=", ")))
}
}
# Remove highly correlated features
variables_to_keep <- 1:ncol(x)  # keep the default features
for (pair in correlated_pairs) {
variables_to_keep <- variables_to_keep[variables_to_keep != pair[2]]  # remove the second features in the list
}
x_ncorr <- x[, variables_to_keep]
print(variables_to_keep)
set.seed(123)
split <- sample.split(x_ncorr, SplitRatio = 0.7)
x_train <- subset(x_ncorr, split == TRUE)
x_test <- subset(x_ncorr, split == FALSE)
y_train <- subset(y,split == TRUE)
y_test <- subset(y,split == FALSE)
z_score_normalization <- function(x) {
return((x - mean(x)) / sd(x))
}
# Normalize train and test set separately
x_train_norm = as.data.frame(lapply(x_train,z_score_normalization))
x_test_norm = as.data.frame(lapply(x_test,z_score_normalization))
quartz(title = "Scatter Plot of distribution before normalization")
ggplot(x_train, aes(x = radius_mean, y =seq_len(nrow(x_train)))) +
geom_point() +
labs(x = "Radius Mean",
y = "Samples") +
theme_minimal()
quartz(title = "Scatter Plot of distribution after normalization")
ggplot(x_train_norm, aes(x = radius_mean, y =seq_len(nrow(x_train)))) +
geom_point() +
labs(x = "Radius Mean",
y = "Samples") +
theme_minimal()
train_control_lr <- trainControl(method="cv", number = 5)
#################   R Lab: BSS   #################
### The Hitters data will be used in this lab #####
# We wish to predict a baseball playerâ€™s Salary on the basis of various statistics associated with performance in the previous year. First of all, we note that the Salary variable is missing for some of the players
library(ISLR)
names(Hitters)
head(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters=na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters))
n = nrow(Hitters); n # sample size
################### Subset Selection #######################
######### Best Subset Selection ########
# The regsubsets() function (part of the leaps library) performs best subset selection by identifying the best model that contains a given number of predictors, where best is quantified using RSS.
# Same syntax of lm()
library(leaps)
regfit.full=regsubsets(Salary~.,Hitters)
# An asterisk indicates that a given variable is included in the corresponding model
summary(regfit.full)
# the nvmax option can be used in order to return as many variables as are desired.
regfit.full=regsubsets(Salary~.,data=Hitters ,nvmax=19)
reg.summary=summary(regfit.full)
names(reg.summary)# returns R2, RSS, adjusted R2, Cp, and BIC.
# We can examine these to try to select the best overall model
reg.summary$rsq # R2 statistic increases monotonically as more variables are included.
which.min(reg.summary$rss) ## identify the location of the minimum
cat("\nLocation of RSS min:",which.min(reg.summary$rss),"\n")
cat("Location of adj-RSq max:",which.max(reg.summary$adjr2),"\n ")
cat("Location of Cp min:",which.min(reg.summary$cp),"\n ")
cat("Location of BIC min:",which.min(reg.summary$bic),"\n ")
# Plot RSS, adjusted R2, Cp, and BIC for all of the models at once
dev.new()
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab="Number of Variables ",ylab="RSS",
type="l")
points(which.min(reg.summary$rss),min(reg.summary$rss), col="red",cex=2,pch=20)
plot(reg.summary$adjr2 ,xlab="Number of Variables ",
ylab="Adjusted RSq",type="l")
points(which.max(reg.summary$adjr2),max(reg.summary$adjr2), col="red",cex=2,pch=20)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp", type="l")
points(which.min(reg.summary$cp ),min(reg.summary$cp),col="red",cex=2,pch=20)
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",type="l")
points(which.min(reg.summary$bic),min(reg.summary$bic),col="red",cex=2,pch=20)
dev.print(device=pdf, "HitterBSS.pdf")
# The regsubsets() function has a built-in plot() command which can be used to display the selected variables for the best model with a given number of predictors, ranked according to the R2, BIC, Cp, adjusted R2.
# To find out more about this function, type ?plot.regsubsets.
dev.new()
plot(regfit.full,scale="r2")
dev.print(device=pdf, "HitterBSS_R2.pdf")
dev.new()
plot(regfit.full,scale="adjr2")
dev.print(device=pdf, "HitterBSS_adjR2.pdf")
dev.new()
plot(regfit.full,scale="Cp")
dev.print(device=pdf, "HitterBSS_Cp.pdf")
dev.new()
plot(regfit.full,scale="bic")
dev.print(device=pdf, "HitterBSS_BIC.pdf")
# The top row of each plot contains a black square for each variable selected according to the optimal model associated with that statistic.
coef(regfit.full ,which.min(reg.summary$bic)) #see the coefficient estimates for the 6-variable model
n = nrow(dataset); n # sample size
n = nrow(dataset) # sample size
sample_size = nrow(dataset); sample_size
nan_count <- sapply(dataset, function(x) sum(is.na(x)))
cat("Couting the NaN value on features:\n"); nan_count
print(nan_count)
sample_size = nrow(dataset)
print(sample_size)
nan_count <- sapply(dataset, function(x) sum(is.na(x)))
cat("Couting the NaN value on features:\n")
print(nan_count)
# Dataset (for an error maybe) contains column "X" full of Nan values -> remove
dataset$X <- NULL
nan_count <- sapply(dataset, function(x) sum(is.na(x)))
cat("Couting the NaN value on features after delete X feature:\n")
print(nan_count)
# Visualizing the target variable distribution
print("Distribution of the target variable (Y):")
print(table(dataset$diagnosis))
quartz(title = "Distribution of Target Value")
ggplot(dataset, aes(x = factor(diagnosis), fill = factor(diagnosis))) +
geom_bar() +
labs(title = "Distribution of the Target Variable", x = "Diagnosis", y = "Count")
# Split the data in X and Y
y = dataset$diagnosis
id = dataset$id
x = subset(dataset, select = -c(diagnosis,id))
# The Y value is a categorical value ("M" and "B" values)
# the solution is to transform the "M" value in 1 e "B" value in "0" value
# We use the ifelse function to make a conditional substitution
y <- ifelse(y == "M", 1, ifelse(y == "B", 0, NA))
y <- factor(y, levels = c("0", "1"))
y
# Create correlation matrix using corrplot library
quartz(title = "Correlation Matrix")    # use quartz to change the name of window
correlation_matrix <- cor(x)
corrplot(correlation_matrix, method = "circle", type = "upper", order = "hclust"
,tl.cex = 0.7, diag = FALSE)
correlation_threshold <- 0.9
correlation_mask <- abs(correlation_matrix) > correlation_threshold
# Initialize a list to collect correlated features for each feature
correlated_features <- vector("list", length = nrow(correlation_matrix))
names(correlated_features) <- paste("Feature", 1:nrow(correlation_matrix))
# Populate the list with indices of correlated features
for (i in 1:(nrow(correlation_matrix) - 1)) {
for (j in (i + 1):ncol(correlation_matrix)) {
if (correlation_mask[i, j]) {
correlated_features[[i]] <- c(correlated_features[[i]], j)
correlated_features[[j]] <- c(correlated_features[[j]], i)  # Include for bidirectional correlation
}
}
}
# Print correlated features
cat("Highly Correlated Features:\n")
for (i in seq_along(correlated_features)) {
if (length(correlated_features[[i]]) > 0) {
cat(sprintf("Feature %3d and Features %s\n", i, paste(correlated_features[[i]], collapse=", ")))
}
}
# Remove highly correlated features
variables_to_keep <- 1:ncol(x)  # keep the default features
for (pair in correlated_pairs) {
variables_to_keep <- variables_to_keep[variables_to_keep != pair[2]]  # remove the second features in the list
}
x_ncorr <- x[, variables_to_keep]
print(variables_to_keep)
x_ncorr <- x[, variables_to_keep]
variables_to_keep
dataset <- read.csv("data/cancer.csv")
summary(dataset)
sample_size = nrow(dataset)
sample_size
nan_count <- sapply(dataset, function(x) sum(is.na(x)))
cat("Couting the NaN value on features:\n")
nan_count
# Dataset (for an error maybe) contains column "X" full of Nan values -> remove
dataset$X <- NULL
nan_count <- sapply(dataset, function(x) sum(is.na(x)))
cat("Couting the NaN value on features after delete X feature:\n")
print(nan_count)
# Visualizing the target variable distribution
print("Distribution of the target variable (Y):")
sample_size = nrow(dataset)
sample_size
nan_count <- sapply(dataset, function(x) sum(is.na(x)))
cat("Couting the NaN value on features:\n")
nan_count
# Dataset (for an error maybe) contains column "X" full of Nan values -> remove
dataset$X <- NULL
nan_count <- sapply(dataset, function(x) sum(is.na(x)))
cat("Couting the NaN value on features after delete X feature:\n")
nan_count
# Visualizing the target variable distribution
print("Distribution of the target variable (Y):")
print(table(dataset$diagnosis))
sample_size = nrow(dataset)
print(sample_size)
nan_count <- sapply(dataset, function(x) sum(is.na(x)))
print("Couting the NaN value on features:\n")
print(nan_count)
# Dataset (for an error maybe) contains column "X" full of Nan values -> remove
dataset$X <- NULL
nan_count <- sapply(dataset, function(x) sum(is.na(x)))
cat("Couting the NaN value on features after delete X feature:\n")
print(nan_count)
nan_count <- sapply(dataset, function(x) sum(is.na(x)))
print("Couting the NaN value on features after delete X feature:\n")
print(nan_count)
# Visualizing the target variable distribution
print("Distribution of the target variable (Y):")
print(table(dataset$diagnosis))
quartz(title = "Distribution of Target Value")
ggplot(dataset, aes(x = factor(diagnosis), fill = factor(diagnosis))) +
geom_bar() +
labs(title = "Distribution of the Target Variable", x = "Diagnosis", y = "Count")
# Split the data in X and Y
y = dataset$diagnosis
id = dataset$id
x = subset(dataset, select = -c(diagnosis,id))
# The Y value is a categorical value ("M" and "B" values)
# the solution is to transform the "M" value in 1 e "B" value in "0" value
# We use the ifelse function to make a conditional substitution
y <- ifelse(y == "M", 1, ifelse(y == "B", 0, NA))
y <- factor(y, levels = c("0", "1"))
y
# The Y value is a categorical value ("M" and "B" values)
# the solution is to transform the "M" value in 1 e "B" value in "0" value
# We use the ifelse function to make a conditional substitution
y <- ifelse(y == "M", 1, ifelse(y == "B", 0, NA))
y <- factor(y, levels = c("0", "1"))
print(y)
# Split the data in X and Y
y = dataset$diagnosis
id = dataset$id
x = subset(dataset, select = -c(diagnosis,id))
# The Y value is a categorical value ("M" and "B" values)
# the solution is to transform the "M" value in 1 e "B" value in "0" value
# We use the ifelse function to make a conditional substitution
y <- ifelse(y == "M", 1, ifelse(y == "B", 0, NA))
y <- factor(y, levels = c("0", "1"))
print(y)
# Create correlation matrix using corrplot library
quartz(title = "Correlation Matrix")    # use quartz to change the name of window
correlation_matrix <- cor(x)
corrplot(correlation_matrix, method = "circle", type = "upper", order = "hclust"
,tl.cex = 0.7, diag = FALSE)
correlation_threshold <- 0.9
correlation_mask <- abs(correlation_matrix) > correlation_threshold
# Initialize a list to collect correlated features for each feature
correlated_features <- vector("list", length = nrow(correlation_matrix))
names(correlated_features) <- paste("Feature", 1:nrow(correlation_matrix))
# Populate the list with indices of correlated features
for (i in 1:(nrow(correlation_matrix) - 1)) {
for (j in (i + 1):ncol(correlation_matrix)) {
if (correlation_mask[i, j]) {
correlated_features[[i]] <- c(correlated_features[[i]], j)
correlated_features[[j]] <- c(correlated_features[[j]], i)  # Include for bidirectional correlation
}
}
}
# Print correlated features
cat("Highly Correlated Features:\n")
for (i in seq_along(correlated_features)) {
if (length(correlated_features[[i]]) > 0) {
cat(sprintf("Feature %3d and Features %s\n", i, paste(correlated_features[[i]], collapse=", ")))
}
}
# Remove highly correlated features
variables_to_keep <- 1:ncol(x)  # keep the default features
for (pair in correlated_pairs) {
variables_to_keep <- variables_to_keep[variables_to_keep != pair[2]]  # remove the second features in the list
}
x_ncorr <- x[, variables_to_keep]
variables_to_keep
set.seed(123)
x_ncorr
regfit.full <- regsubsets(y ~ ., data = x_ncorr)
print(summary(regfit.full))
# Subset selection with a specified maximum number of variables
regfit.full <- regsubsets(y ~ ., data = x_ncorr, nvmax = 19)
reg.summary <- summary(regfit.full)
print(names(reg.summary))
# Analyze various statistics
cat("\nLocation of RSS min:", which.min(reg.summary$rss), "\n")
cat("Location of adj-RSq max:", which.max(reg.summary$adjr2), "\n")
cat("Location of Cp min:", which.min(reg.summary$cp), "\n")
cat("Location of BIC min:", which.min(reg.summary$bic), "\n")
# Plot RSS, adjusted R2, Cp, and BIC for all models
par(mfrow = c(2, 2))
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
points(which.min(reg.summary$rss), min(reg.summary$rss), col = "red", cex = 2, pch = 20)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), max(reg.summary$adjr2), col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), min(reg.summary$cp), col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
points(which.min(reg.summary$bic), min(reg.summary$bic), col = "red", cex = 2, pch = 20)
# Additional plots for BSS evaluations
plot(regfit.full, scale = "r2")
plot(regfit.full, scale = "adjr2")
plot(regfit.full, scale = "Cp")
plot(regfit.full, scale = "bic")
# Get coefficients of the model with the minimum BIC
coef(regfit.full, which.min(reg.summary$bic))
regfit.full <- regsubsets(y ~ ., data = x_ncorr)
print(summary(regfit.full))
# Subset selection with a specified maximum number of variables
regfit.full <- regsubsets(y ~ ., data = x_ncorr, nvmax = 15)
reg.summary <- summary(regfit.full)
print(names(reg.summary))
# Analyze various statistics
cat("\nLocation of RSS min:", which.min(reg.summary$rss), "\n")
cat("Location of adj-RSq max:", which.max(reg.summary$adjr2), "\n")
cat("Location of Cp min:", which.min(reg.summary$cp), "\n")
cat("Location of BIC min:", which.min(reg.summary$bic), "\n")
# Plot RSS, adjusted R2, Cp, and BIC for all models
par(mfrow = c(2, 2))
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
points(which.min(reg.summary$rss), min(reg.summary$rss), col = "red", cex = 2, pch = 20)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), max(reg.summary$adjr2), col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), min(reg.summary$cp), col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
points(which.min(reg.summary$bic), min(reg.summary$bic), col = "red", cex = 2, pch = 20)
regfit.full <- regsubsets(y ~ ., data = x_ncorr)
print(summary(regfit.full))
# Subset selection with a specified maximum number of variables
regfit.full <- regsubsets(y ~ ., data = x_ncorr, nvmax = 10)
reg.summary <- summary(regfit.full)
print(names(reg.summary))
# Analyze various statistics
cat("\nLocation of RSS min:", which.min(reg.summary$rss), "\n")
cat("Location of adj-RSq max:", which.max(reg.summary$adjr2), "\n")
cat("Location of Cp min:", which.min(reg.summary$cp), "\n")
cat("Location of BIC min:", which.min(reg.summary$bic), "\n")
# Plot RSS, adjusted R2, Cp, and BIC for all models
par(mfrow = c(2, 2))
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
points(which.min(reg.summary$rss), min(reg.summary$rss), col = "red", cex = 2, pch = 20)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), max(reg.summary$adjr2), col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), min(reg.summary$cp), col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
points(which.min(reg.summary$bic), min(reg.summary$bic), col = "red", cex = 2, pch = 20)
# Additional plots for BSS evaluations
plot(regfit.full, scale = "r2")
plot(regfit.full, scale = "adjr2")
plot(regfit.full, scale = "Cp")
plot(regfit.full, scale = "bic")
# Get coefficients of the model with the minimum BIC
coef(regfit.full, which.min(reg.summary$bic))
regfit.full <- regsubsets(y ~ ., data = x_ncorr)
print(summary(regfit.full))
# Subset selection with a specified maximum number of variables
regfit.full <- regsubsets(y ~ ., data = x_ncorr, nvmax = 10)
reg.summary <- summary(regfit.full)
print(names(reg.summary))
# Analyze various statistics
cat("\nLocation of RSS min:", which.min(reg.summary$rss), "\n")
cat("Location of adj-RSq max:", which.max(reg.summary$adjr2), "\n")
cat("Location of Cp min:", which.min(reg.summary$cp), "\n")
cat("Location of BIC min:", which.min(reg.summary$bic), "\n")
# Plot RSS, adjusted R2, Cp, and BIC for all models
par(mfrow = c(2, 2))
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
points(which.min(reg.summary$rss), min(reg.summary$rss), col = "red", cex = 2, pch = 20)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), max(reg.summary$adjr2), col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), min(reg.summary$cp), col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
points(which.min(reg.summary$bic), min(reg.summary$bic), col = "red", cex = 2, pch = 20)
regfit.full <- regsubsets(y ~ ., data = x_ncorr)
print(summary(regfit.full))
# Subset selection with a specified maximum number of variables
regfit.full <- regsubsets(y ~ ., data = x_ncorr, nvmax = 15)
reg.summary <- summary(regfit.full)
print(names(reg.summary))
# Analyze various statistics
cat("\nLocation of RSS min:", which.min(reg.summary$rss), "\n")
cat("Location of adj-RSq max:", which.max(reg.summary$adjr2), "\n")
cat("Location of Cp min:", which.min(reg.summary$cp), "\n")
cat("Location of BIC min:", which.min(reg.summary$bic), "\n")
# Plot RSS, adjusted R2, Cp, and BIC for all models
par(mfrow = c(2, 2))
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
points(which.min(reg.summary$rss), min(reg.summary$rss), col = "red", cex = 2, pch = 20)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), max(reg.summary$adjr2), col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), min(reg.summary$cp), col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
points(which.min(reg.summary$bic), min(reg.summary$bic), col = "red", cex = 2, pch = 20)
# Get the matrix of included/excluded features for each model
model_matrix <- summary(regfit.full)$which
# View the matrix to manually check included features
print(model_matrix)
# Automatically find non-included features for the model with the minimum BIC
optimal_model_index <- which.min(reg.summary$bic)
included_features <- names(model_matrix)[model_matrix[optimal_model_index,]]
non_included_features <- setdiff(names(x_ncorr), included_features)
# Print the features that are not included in the optimal model
cat("Non-included Features in the Optimal Model (Min BIC):", paste(non_included_features, collapse=", "), "\n")
# Print the features that are not included in the optimal model
cat("Non-included Features in the Optimal Model (Min BIC):", paste(non_included_features, collapse="\n"), "\n")
# Print the features that are not included in the optimal model
cat("Non-included Features in the Optimal Model (Min BIC):\n", paste(non_included_features, collapse="\t\n"), "\n")
# Print the features that are not included in the optimal model
cat("Non-included Features in the Optimal Model (Min BIC):\n", paste(non_included_features, collapse="\n\t"), "\n")
# Print the features that are not included in the optimal model
cat("Non-included Features in the Optimal Model (Min BIC):\n\t", paste(non_included_features, collapse="\n\t"), "\n")
# Print the features that are not included in the optimal model
cat("Non-included Features in the Optimal Model (Min BIC):\n\t",
paste(non_included_features, collapse="\n\t"), "\n")
# Print the features that are included in the optimal model
cat("Included Features in the Optimal Model (Min BIC):\n\t",
paste(included_features, collapse="\n\t"), "\n")
# Print the features that are not included in the optimal model
cat("Non-included Features in the Optimal Model (Min BIC):\n\t",
paste(non_included_features, collapse="\n\t"), "\n")
# Automatically find non-included features for the model with the minimum BIC
optimal_model_index <- which.min(reg.summary$bic)
included_features <- names(model_matrix)[model_matrix[optimal_model_index,]]
non_included_features <- setdiff(names(x_ncorr), included_features)
# Print the features that are included in the optimal model
cat("Included Features in the Optimal Model (Min BIC):\n\t",
paste(included_features, collapse="\n\t"), "\n")
# Print the features that are included in the optimal model
cat("Included Features in the Optimal Model (Min BIC):\n\t",
paste(included_features, collapse="\n\t"), "\n")
# Print the features that are not included in the optimal model
cat("Non-included Features in the Optimal Model (Min BIC):\n\t",
paste(non_included_features, collapse="\n\t"), "\n")
# Get coefficients of the model with the minimum BIC
coef(regfit.full, which.min(reg.summary$bic))
# Get the matrix of included/excluded features for each model
model_matrix <- summary(regfit.full)$which
# Get the matrix of included/excluded features for each model
model_matrix <- summary(regfit.full)$which
print(model_matrix)
# Automatically find non-included features for the model with the minimum BIC
optimal_model_index <- which.min(reg.summary$bic)
included_features <- names(model_matrix)[model_matrix[optimal_model_index,]]
non_included_features <- setdiff(names(x_ncorr), included_features)
# Print the features that are included in the optimal model
cat("Included Features in the Optimal Model (Min BIC):\n\t",
paste(included_features, collapse="\n\t"), "\n")
# Print the features that are not included in the optimal model
cat("Non-included Features in the Optimal Model (Min BIC):\n\t",
paste(non_included_features, collapse="\n\t"), "\n")
# Automatically find non-included features for the model with the minimum BIC
optimal_model_index <- which.min(reg.summary$bic)
# Automatically find non-included features for the model with the minimum BIC
optimal_model_index <- which.min(reg.summary$bic)
included_features <- names(model_matrix)[model_matrix[optimal_model_index,]]
non_included_features <- setdiff(names(x_ncorr), included_features)
optimal_model_index <- which.min(reg.summary$RSS)
included_features <- names(model_matrix)[model_matrix[optimal_model_index,]]
non_included_features <- setdiff(names(x_ncorr), included_features)
# Print the features that are included in the optimal model
cat("Included Features in the Optimal Model (Min BIC):\n\t",
paste(included_features, collapse="\n\t"), "\n")
# Print the features that are not included in the optimal model
cat("Non-included Features in the Optimal Model (Min BIC):\n\t",
paste(non_included_features, collapse="\n\t"), "\n")
# Find non-included features for the model with minimum BIC
optimal_model_index <- which.min(reg.summary$bic)
included_features <- names(model_matrix)[model_matrix[optimal_model_index,]]
non_included_features <- setdiff(names(x_ncorr), included_features)
# Print the features that are included in the optimal model
cat("Included Features in the Optimal Model (Min BIC):\n\t",
paste(included_features, collapse="\n\t"), "\n")
# Get the matrix of included/excluded features for each model
model_matrix <- summary(regfit.full)$which
print(model_matrix)
# Find the optimal model index for minimum BIC
optimal_model_index <- which.min(reg.summary$bic)
# Correctly extract included features excluding the intercept
# Ensure you exclude the intercept from the feature names if it's included
if ("(Intercept)" %in% names(model_matrix)) {
included_features <- names(model_matrix)[-1][model_matrix[optimal_model_index, -1]]
} else {
included_features <- names(model_matrix)[model_matrix[optimal_model_index,]]
}
# Assuming 'x_ncorr' is your dataset and contains only the predictor variables
non_included_features <- setdiff(names(x_ncorr), included_features)
# Print results to check
cat("Included Features in the Optimal Model (Min BIC):\n\t", paste(included_features, collapse="\n\t"), "\n")
cat("Non-included Features in the Optimal Model (Min BIC):\n\t", paste(non_included_features, collapse="\n\t"), "\n")
# Find non-included features for the model with minimum BIC
optimal_model_index <- which.min(reg.summary$bic); optimal_model_index
included_features <- names(model_matrix)[model_matrix[optimal_model_index,]]
non_included_features <- setdiff(names(x_ncorr), included_features)
# Print the features that are included in the optimal model
cat("Included Features in the Optimal Model (Min BIC):\n\t",
paste(included_features, collapse="\n\t"), "\n")
